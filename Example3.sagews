︠6d8167d9-7b50-413c-a76c-fd3d95ecb1d9i︠
%md
# Working with Multivariate polynomials
Let's consider a more interesting example: $\mathbb{Q}[x,y,z]$ with lexicographical ordering
︡ab8cbef3-f28b-422b-9721-02a46f123360︡{"done":true,"md":"# Working with Multivariate polynomials\nLet's consider a more interesting example: $\\mathbb{Q}[x,y,z]$ with lexicographical ordering"}
︠8ce97975-13b8-4902-bac6-e4b0d0b4d2b5s︠
P.<x,y,z> = PolynomialRing(RationalField(),order="lex")
︡68555b5a-a6f2-4f62-85bb-9606fbca335e︡{"done":true}︡
︠72f89313-dcf7-48f2-81f0-4158a01ef94bi︠
%md
An extension of the Euclidian algorithm for dividing a given polynomial $f$ by multiple polynomials $g_1, g_2, \ldots, g_s$ was discussed in class. A possible implementation is given below
︡20ab91b3-a7bd-42cf-bc75-54e5e03baffc︡{"done":true,"md":"An extension of the Euclidian algorithm for dividing a given polynomial $f$ by multiple polynomials $g_1, g_2, \\ldots, g_s$ was discussed in class. A possible implementation is given below"}
︠6b8c8f06-54a0-493d-ae90-c01b4cfa13c1s︠
f = 3*x^2*y + 2*y^2 + x + 1
g = [2*x^2+1,y+1]
f.lm()
︡7b4143c5-73c0-4a98-8d22-8b03214ef0f3︡{"stdout":"x^2*y\n"}︡{"done":true}︡
︠79580183-9ab3-41de-8bdc-3f80439c596as︠
a = [0,0]
r = 0
while f !=0:
    division = False
    for i in range(len(g)):
        if g[i].lm().divides(f.lm()):
            a[i] = a[i]+f.lt()/g[i].lt()
            q,t = f.lt().quo_rem(g[i].lt())
            f = f - q*g[i]
            division = True
            break
    if not division:
        r = r + f.lt()
        f = f - f.lt()
a
r
︡0a2ccf8f-f5de-48d8-bb5c-2465baf10ed5︡{"stdout":"[3/2*y, 2*y - 7/2]\n"}︡{"stdout":"x + 9/2\n"}︡{"done":true}︡
︠df4cceeb-d50e-4ee9-9bba-07ae15bb6ee1i︠
%md 
Note that this algorithm tries to remove the leading term from $f$ by trying all the $g_i$'s in order and stopping as soon it succeeded. For the new leading term, it starts again with $g_1$. If none of the $g_i$'s divide the leading term of $f$, the leading term is moved to the rest. Thus, we are guaranteed that the algorithm stops after a finite number of steps.
︡59bfb2a6-19a9-4965-8854-6706beaf1252︡{"done":true,"md":"Note that this algorithm tries to remove the leading term from $f$ by trying all the $g_i$'s in order and stopping as soon it succeeded. For the new leading term, it starts again with $g_1$. If none of the $g_i$'s divide the leading term of $f$, the leading term is moved to the rest. Thus, we are guaranteed that the algorithm stops after a finite number of steps."}
︠5a287460-a4e2-430d-bae4-8315a5ca7c41is︠

︡a33c6748-e4dc-43f4-b076-6f7b35e903fe︡{"done":true}︡
︠1702dbb3-b9c1-4011-8af3-346e53bbc556i︠
%md
## Ideals and the Gröbner basis
Next, let's define the ideal generated by $x^2 + y^2 + z^2 - 1$, $x^2 - y + z^2$ and $x-z$
︡7f4ce4c7-12bd-45ff-ae71-be3bbdf8c1d2︡{"done":true,"md":"## Ideals and the Gröbner basis\nNext, let's define the ideal generated by $x^2 + y^2 + z^2 - 1$, $x^2 - y + z^2$ and $x-z$"}
︠d7bb523c-b654-4519-9721-80a71b270aebs︠
I = Ideal([x^2+y^2+z^2-1,x^2-y+z^2,x-z])
︡145ecb03-f4a2-4957-a743-1a60018a1649︡{"done":true}︡
︠3a7c3c69-d285-470b-b8e2-f002b3408f3ai︠
%md
and find a Gröbner basis for it
︡c3c2b652-fe77-4965-89ae-68a2089b27fd︡{"done":true,"md":"and find a Gröbner basis for it"}
︠b7b5feb1-23a6-49cc-9663-03f358ad728bs︠
G=I.groebner_basis()
G
︡b2f86638-825b-45c6-92d0-5815805469fd︡{"stdout":"[x - z, y - 2*z^2, z^4 + 1/2*z^2 - 1/4]\n"}︡{"done":true}︡
︠39fc90c4-11e2-45e4-843d-5c7c227c3444i︠
%md
To find the variety $V = \mathbf{V}(I)$ we can proceed to solve the equations $x - z = 0$, $y - 2z^2 = 0$ and $z^4 + z^2/2-1/4$, starting with the last one (since it depends only on $z$) and substituting the solutions back into the first and second equation, which both only depend on two variables.
︡b5d39e3e-c1c2-4367-8be4-75924a4dce95︡{"done":true,"md":"To find the variety $V = \\mathbf{V}(I)$ we can proceed to solve the equations $x - z = 0$, $y - 2z^2 = 0$ and $z^4 + z^2/2-1/4$, starting with the last one (since it depends only on $z$) and substituting the solutions back into the first and second equation, which both only depend on two variables."}
︠5c79ba63-1d84-49f6-bd2f-78b8676bbe0di︠
%md
To be able to use the `complex_roots()` method we saw in the previous example, we first need to explicitly convert the elements of `B` to polynomials
︡089db461-a980-4658-b3f6-525a07b83865︡{"done":true,"md":"To be able to use the `complex_roots()` method we saw in the previous example, we first need to explicitly convert the elements of `B` to polynomials"}
︠ccb69a95-698d-425a-961a-9d7e1d50bf4fs︠
f3 = G[2].univariate_polynomial()
f3
︡c8fd0307-d060-41ac-af08-cc1a0ccd43ee︡{"stdout":"z^4 + 1/2*z^2 - 1/4\n"}︡{"done":true}︡
︠8b591ab9-6400-4a9e-b416-113bc9ffd256si︠
%md
then, we can find its roots
︡8233fd8e-a9ea-4cd5-b982-5dc83d0b174c︡{"done":true,"md":"then, we can find its roots"}︡
︠44fd9df8-a8cc-41e8-9822-69ecc06f8016s︠
roots=f3.complex_roots()
roots
︡087e3816-4629-423e-bf1e-13a7ac99bd22︡{"stdout":"[-0.555892970251421, 0.555892970251421, -0.899453719973934*I, 0.899453719973934*I]\n"}︡{"done":true}︡
︠a3141ef8-899a-48a9-a2b0-a3d32a40fd60i︠
%md
Finally, we can substitute the roots, one-by-one, in the other two equations, convert them to polynomials, and solve them
︡e4447473-698e-4313-b08f-eb3f2042b54e︡{"done":true,"md":"Finally, we can substitute the roots, one-by-one, in the other two equations, convert them to polynomials, and solve them"}
︠3f5c2091-e6bb-4ae0-9d9c-24365cef9201s︠
f1=G[1].substitute(z=roots[0]).univariate_polynomial()
f1
f1.complex_roots()
︡f8b553dd-2f8c-4669-9150-aa6fe5d86732︡{"stdout":"y - 0.618033988749895\n"}︡{"stdout":"[0.618033988749895]\n"}︡{"done":true}︡
︠09fe4d59-917b-45d2-8828-4b79030b7caas︠
f0=G[0].substitute(z=roots[0]).univariate_polynomial()
f0.complex_roots()
︡b05b74f4-1eee-4fee-af51-1bdca69befaa︡{"stdout":"[-0.555892970251421]\n"}︡{"done":true}︡
︠e72b723c-8871-4d44-8376-c025677906b5i︠
%md
In same cases, we can also ask directly for the variety using the `variety()` method
︡fbcc373b-ea9d-40c8-b63f-5135933cac5b︡{"done":true,"md":"In same cases, we can also ask directly for the variety using the `variety()` method"}
︠7b1f8d30-256f-47e8-b2b8-7dd31b8d001ds︠
I.variety()
︡7abacec4-88ea-47f1-a66f-502880bfb6b7︡{"stdout":"[]\n"}︡{"done":true}︡
︠cc7f3708-b246-40fe-bb71-2ba9e28d5c7ci︠
%md
In this case SAGE return an empty list because the system of polynomial equations does not have a solution in $\mathbb{Q}$. We can ask SAGE to give a solution in $\mathbb{C}$:
︡d460a223-3b94-41eb-b48a-2478a27e64cb︡{"done":true,"md":"In this case SAGE return an empty list because the system of polynomial equations does not have a solution in $\\mathbb{Q}$. We can ask SAGE to give a solution in $\\mathbb{C}$:"}
︠8a5d586e-09ff-43ae-9d3a-269f682ac5fcs︠
I.variety(ComplexField())
︡a01ca1a2-d46d-4c2e-af51-c26d76c721a4︡{"stdout":"[{y: 0.618033988749895, z: -0.555892970251421, x: -0.555892970251421}, {y: -1.61803398874989, z: -0.899453719973934*I, x: -0.899453719973934*I}, {y: -1.61803398874989, z: 0.899453719973934*I, x: 0.899453719973934*I}, {y: 0.618033988749895, z: 0.555892970251421, x: 0.555892970251421}]\n"}︡{"done":true}︡
︠caf9c908-cea7-4922-8e8b-e4245bcc64b0i︠
%md
## Another example
Now, let's return to the example from the first Notebook and consider the variety $\mathbf{V}(x^2 + y^2 - 1/2, x - 2y + z)$ over $\mathbb{C}$. Note that we have fewer variables than equations here, so we could possibly have an infinite number of solutions.
︡61908ecf-b2cc-42c9-923b-36b2684694b5︡{"done":true,"md":"## Another example\nNow, let's return to the example from the first Notebook and consider the variety $\\mathbf{V}(x^2 + y^2 - 1/2, x - 2y + z)$ over $\\mathbb{C}$. Note that we have fewer variables than equations here, so we could possibly have an infinite number of solutions."}
︠30f15484-eabd-4e42-9867-6dd1697d66a5s︠
P.<x,y,z> = PolynomialRing(ComplexField(),order="lex")
I = Ideal([x^2 + y^2 - 1/2, x - 2*y + z])
G = I.groebner_basis()
G
︡5f97d244-be12-4ff7-b471-0fea00d6fe83︡{"stdout":"[x + (-2.00000000000000)*y + z, y^2 + (-0.800000000000000)*y*z + 0.200000000000000*z^2 - 0.100000000000000]\n"}︡{"done":true}︡
︠6610a497-73ab-45f2-9006-9a21ad8148cdi︠
%md
We see that none of the elements of $G$ depends on only a single variable. For each fixed $z$, however, we can solve $y^2-4/5yz + 1/5z^2$ and subsequently find the corresponding $x$ coordinates.
︡1bcfda2b-ed08-4b45-ab91-2f4f467d473a︡{"done":true,"md":"We see that none of the elements of $G$ depends on only a single variable. For each fixed $z$, however, we can solve $y^2-4/5yz + 1/5z^2$ and subsequently find the corresponding $x$ coordinates."}
︠e795b152-5c73-4066-8bac-be67e30b2aed︠









