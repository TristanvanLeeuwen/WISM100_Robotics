︠205c0cc0-43b2-43e4-b5a4-70dda971dddds︠
from __future__ import print_function
import numpy as np
︡1cf72ccc-141e-4c98-a26f-ab19de9df0c8︡{"done":true}
︠502afcef-8de5-4515-adfb-5b8508c6d2fai︠
%md
# Numerical rootfinding
Find the roots of $f(x) = x^7 - 7x^6 + 21x^5 - 35x^4 + 35x^3 - 21x^2 + 7x - 1$
︡eea107e7-1549-486e-894c-d6baeabf679b︡{"done":true,"md":"# Numerical rootfinding\nFind the roots of $f(x) = x^7 - 7x^6 + 21x^5 - 35x^4 + 35x^3 - 21x^2 + 7x - 1$"}
︠620c768e-9cee-487a-a25a-6edfbd93c1f1s︠
#f(x) = x^7 - 7*x^6 + 21*x^5 - 35*x^4 + 35*x^3 - 21*x^2 + 7*x - 1
f(x) = (x-1)^7
delta = .00000000001
plot(f,1-delta,1+delta,color='blue')
︡61d3d900-f5be-4f46-86bc-d8d422c468d9︡{"file":{"filename":"/home/user/.sage/temp/project-1e6de7dc-adeb-4f47-ae0e-229406713b63/1497/tmp_47OCcg.svg","show":true,"text":null,"uuid":"7cf4a683-c9dc-4951-b0bf-ac6747af777d"},"once":false}︡{"done":true}
︠763e9594-0b25-4e60-8d62-71bca53763a2i︠
%md
## Floating point numbers

Solve a quadratic equation; one of the roots is far more accurate than the other.
︡9670b028-d5e4-408d-bac4-d9eddd6fd780︡{"done":true,"md":"## Floating point numbers\n\nSolve a quadratic equation; one of the roots is far more accurate than the other."}
︠d0bee4d6-2e9b-4a1c-a6c0-2d7e8727402bs︠
a = 1
b = 200
c = -0.000015
r1 = 0.000000075
r2 = -200.000000075
x1 = (-b + sqrt(b^2 - 4*a*c))/(2*a)
x2 = (-b - sqrt(b^2 - 4*a*c))/(2*a)

print(x1,abs(x1-r1)/abs(r1))
print(x2,abs(x2-r2)/abs(r2))
︡1ee8ee84-8c0a-4ab6-a06b-990423007d2b︡{"stdout":"7.50000026528141e-8 3.53708553270023e-8\n"}︡{"stdout":"-200.000000075000 0.000000000000000\n"}︡{"done":true}
︠e94068bc-3e20-47e3-9adc-be2c565fa3ddi︠
%md
The recursion $$x_{n+1} = 4x_n - 1,$$ has a fixed point $x_* = 1/3$:
︡4929b1d0-85cb-40d9-954e-f8a1ee56e19c︡{"done":true,"md":"The recursion $$x_{n+1} = 4x_n - 1,$$ has a fixed point $x_* = 1/3$:"}
︠627fe4ea-5e17-411a-a486-ba2dacb60108s︠
x = RDF(1/3)
for i in range(1,500): x = 4*x-1; print(x)
︡321c115f-9005-4ba0-9724-c882a0bec325︡{"stdout":"0.33333333333333326\n0.33333333333333304\n0.33333333333333215\n0.3333333333333286\n0.3333333333333144\n0.33333333333325754\n0.33333333333303017\n0.3333333333321207\n0.3333333333284827\n0.3333333333139308\n0.3333333332557231\n0.3333333330228925\n0.3333333320915699\n0.3333333283662796\n0.3333333134651184\n0.33333325386047363\n0.33333301544189453\n0.3333320617675781\n0.3333282470703125\n0.33331298828125\n0.333251953125\n0.3330078125\n0.33203125\n0.328125\n0.3125\n0.25\n0.0\n-1.0\n-5.0\n-21.0\n-85.0\n-341.0\n-1365.0\n-5461.0\n-21845.0\n-87381.0\n-349525.0\n-1398101.0\n-5592405.0\n-22369621.0\n-89478485.0\n-357913941.0\n-1431655765.0\n-5726623061.0\n-22906492245.0\n-91625968981.0\n-366503875925.0\n-1466015503701.0\n-5864062014805.0\n-23456248059221.0\n-93824992236885.0\n-375299968947541.0\n-1501199875790165.0\n-6004799503160661.0\n-2.4019198012642644e+16\n-9.607679205057058e+16\n-3.843071682022823e+17\n-1.5372286728091292e+18\n-6.148914691236517e+18\n-2.4595658764946067e+19\n-9.838263505978427e+19\n-3.935305402391371e+20\n-1.5741221609565483e+21\n-6.296488643826193e+21\n-2.5185954575304773e+22\n-1.007438183012191e+23\n-4.029752732048764e+23\n-1.6119010928195055e+24\n-6.447604371278022e+24\n-2.5790417485112088e+25\n-1.0316166994044835e+26\n-4.126466797617934e+26\n-1.6505867190471736e+27\n-6.602346876188694e+27\n-2.6409387504754778e+28\n-1.0563755001901911e+29\n-4.2255020007607644e+29\n-1.6902008003043058e+30\n-6.760803201217223e+30\n-2.7043212804868892e+31\n-1.0817285121947557e+32\n-4.326914048779023e+32\n-1.730765619511609e+33\n-6.923062478046436e+33\n-2.7692249912185746e+34\n-1.1076899964874298e+35\n-4.430759985949719e+35\n-1.7723039943798877e+36\n-7.089215977519551e+36\n-2.8356863910078204e+37\n-1.1342745564031281e+38\n-4.5370982256125126e+38\n-1.814839290245005e+39\n-7.25935716098002e+39\n-2.903742864392008e+40\n-1.1614971457568032e+41\n-4.645988583027213e+41\n-1.8583954332108852e+42\n-7.433581732843541e+42\n-2.9734326931374163e+43\n-1.1893730772549665e+44\n-4.757492309019866e+44\n-1.9029969236079464e+45\n-7.611987694431786e+45\n-3.044795077772714e+46\n-1.2179180311090857e+47\n-4.871672124436343e+47\n-1.948668849774537e+48\n-7.794675399098148e+48\n-3.1178701596392594e+49\n-1.2471480638557038e+50\n-4.988592255422815e+50\n-1.995436902169126e+51\n-7.981747608676504e+51\n-3.1926990434706016e+52\n-1.2770796173882406e+53\n-5.108318469552963e+53\n-2.043327387821185e+54\n-8.17330955128474e+54\n-3.269323820513896e+55\n-1.3077295282055584e+56\n-5.230918112822234e+56\n-2.0923672451288935e+57\n-8.369468980515574e+57\n-3.3477875922062296e+58\n-1.3391150368824918e+59\n-5.356460147529967e+59\n-2.142584059011987e+60\n-8.570336236047948e+60\n-3.428134494419179e+61\n-1.3712537977676716e+62\n-5.4850151910706865e+62\n-2.1940060764282746e+63\n-8.776024305713098e+63\n-3.5104097222852394e+64\n-1.4041638889140957e+65\n-5.616655555656383e+65\n-2.2466622222625532e+66\n-8.986648889050213e+66\n-3.594659555620085e+67\n-1.437863822248034e+68\n-5.751455288992136e+68\n-2.3005821155968545e+69\n-9.202328462387418e+69\n-3.680931384954967e+70\n-1.4723725539819869e+71\n-5.889490215927947e+71\n-2.355796086371179e+72\n-9.423184345484716e+72\n-3.7692737381938864e+73\n-1.5077094952775545e+74\n-6.030837981110218e+74\n-2.4123351924440873e+75\n-9.649340769776349e+75\n-3.8597363079105396e+76\n-1.5438945231642159e+77\n-6.175578092656863e+77\n-2.4702312370627454e+78\n-9.880924948250981e+78\n-3.9523699793003926e+79\n-1.580947991720157e+80\n-6.323791966880628e+80\n-2.5295167867522513e+81\n-1.0118067147009005e+82\n-4.047226858803602e+82\n-1.6188907435214408e+83\n-6.475562974085763e+83\n-2.5902251896343053e+84\n-1.0360900758537221e+85\n-4.1443603034148885e+85\n-1.6577441213659554e+86\n-6.630976485463822e+86\n-2.6523905941855286e+87\n-1.0609562376742114e+88\n-4.243824950696846e+88\n-1.6975299802787383e+89\n-6.790119921114953e+89\n-2.7160479684459813e+90\n-1.0864191873783925e+91\n-4.34567674951357e+91\n-1.738270699805428e+92\n-6.953082799221712e+92\n-2.781233119688685e+93\n-1.112493247875474e+94\n-4.449972991501896e+94\n-1.7799891966007583e+95\n-7.119956786403033e+95\n-2.8479827145612133e+96\n-1.1391930858244853e+97\n-4.556772343297941e+97\n-1.8227089373191765e+98\n-7.290835749276706e+98\n-2.9163342997106824e+99\n-1.166533719884273e+100\n-4.666134879537092e+100\n-1.8664539518148367e+101"}︡{"stdout":"\n-7.465815807259347e+101\n-2.986326322903739e+102\n-1.1945305291614955e+103\n-4.778122116645982e+103\n-1.9112488466583928e+104\n-7.644995386633571e+104\n-3.0579981546534285e+105\n-1.2231992618613714e+106\n-4.892797047445486e+106\n-1.9571188189781942e+107\n-7.828475275912777e+107\n-3.131390110365111e+108\n-1.2525560441460443e+109\n-5.010224176584177e+109\n-2.004089670633671e+110\n-8.016358682534684e+110\n-3.2065434730138735e+111\n-1.2826173892055494e+112\n-5.1304695568221975e+112\n-2.052187822728879e+113\n-8.208751290915516e+113\n-3.2835005163662064e+114\n-1.3134002065464826e+115\n-5.25360082618593e+115\n-2.101440330474372e+116\n-8.405761321897488e+116\n-3.3623045287589954e+117\n-1.3449218115035981e+118\n-5.379687246014393e+118\n-2.151874898405757e+119\n-8.607499593623028e+119\n-3.442999837449211e+120\n-1.3771999349796845e+121\n-5.508799739918738e+121\n-2.2035198959674952e+122\n-8.814079583869981e+122\n-3.5256318335479923e+123\n-1.410252733419197e+124\n-5.641010933676788e+124\n-2.256404373470715e+125\n-9.02561749388286e+125\n-3.610246997553144e+126\n-1.4440987990212577e+127\n-5.776395196085031e+127\n-2.3105580784340123e+128\n-9.242232313736049e+128\n-3.6968929254944196e+129\n-1.4787571701977678e+130\n-5.915028680791071e+130\n-2.3660114723164285e+131\n-9.464045889265714e+131\n-3.7856183557062857e+132\n-1.5142473422825143e+133\n-6.056989369130057e+133\n-2.422795747652023e+134\n-9.691182990608091e+134\n-3.8764731962432365e+135\n-1.5505892784972946e+136\n-6.202357113989178e+136\n-2.4809428455956714e+137\n-9.923771382382686e+137\n-3.969508552953074e+138\n-1.5878034211812297e+139\n-6.351213684724919e+139\n-2.5404854738899675e+140\n-1.016194189555987e+141\n-4.064776758223948e+141\n-1.6259107032895792e+142\n-6.503642813158317e+142\n-2.6014571252633267e+143\n-1.0405828501053307e+144\n-4.162331400421323e+144\n-1.664932560168529e+145\n-6.659730240674116e+145\n-2.6638920962696466e+146\n-1.0655568385078586e+147\n-4.2622273540314345e+147\n-1.7048909416125738e+148\n-6.819563766450295e+148\n-2.727825506580118e+149\n-1.0911302026320472e+150\n-4.364520810528189e+150\n-1.7458083242112756e+151\n-6.983233296845102e+151\n-2.793293318738041e+152\n-1.1173173274952164e+153\n-4.4692693099808655e+153\n-1.7877077239923462e+154\n-7.150830895969385e+154\n-2.860332358387754e+155\n-1.1441329433551016e+156\n-4.576531773420406e+156\n-1.8306127093681625e+157\n-7.32245083747265e+157\n-2.92898033498906e+158\n-1.171592133995624e+159\n-4.686368535982496e+159\n-1.8745474143929984e+160\n-7.498189657571994e+160\n-2.9992758630287974e+161\n-1.199710345211519e+162\n-4.798841380846076e+162\n-1.9195365523384304e+163\n-7.678146209353721e+163\n-3.0712584837414886e+164\n-1.2285033934965954e+165\n-4.914013573986382e+165\n-1.9656054295945527e+166\n-7.862421718378211e+166\n-3.1449686873512843e+167\n-1.2579874749405137e+168\n-5.031949899762055e+168\n-2.012779959904822e+169\n-8.051119839619288e+169\n-3.220447935847715e+170\n-1.288179174339086e+171\n-5.152716697356344e+171\n-2.0610866789425377e+172\n-8.24434671577015e+172\n-3.29773868630806e+173\n-1.319095474523224e+174\n-5.276381898092896e+174\n-2.1105527592371586e+175\n-8.442211036948634e+175\n-3.3768844147794537e+176\n-1.3507537659117815e+177\n-5.403015063647126e+177\n-2.1612060254588504e+178\n-8.644824101835402e+178\n-3.4579296407341606e+179\n-1.3831718562936642e+180\n-5.532687425174657e+180\n-2.2130749700698628e+181\n-8.852299880279451e+181\n-3.5409199521117805e+182\n-1.4163679808447122e+183\n-5.665471923378849e+183\n-2.2661887693515395e+184\n-9.064755077406158e+184\n-3.625902030962463e+185\n-1.4503608123849853e+186\n-5.801443249539941e+186\n-2.3205772998159764e+187\n-9.282309199263906e+187\n-3.712923679705562e+188\n-1.485169471882225e+189\n-5.9406778875289e+189\n-2.37627115501156e+190\n-9.50508462004624e+190\n-3.802033848018496e+191\n-1.5208135392073983e+192\n-6.083254156829593e+192\n-2.4333016627318373e+193\n-9.73320665092735e+193\n-3.89328266037094e+194\n-1.557313064148376e+195\n-6.229252256593504e+195\n-2.4917009026374014e+196\n-9.966803610549606e+196\n-3.986721444219842e+197\n-1.594688577687937e+198\n-6.378754310751748e+198\n-2.551501724300699e+199\n-1.0206006897202796e+200\n-4.0824027588811185e+200\n-1.6329611035524474e+201\n-6.53184441420979e+201\n-2.612737765683916e+202\n-1.0450951062735663e+203"}︡{"stdout":"\n-4.180380425094265e+203\n-1.672152170037706e+204\n-6.688608680150825e+204\n-2.67544347206033e+205\n-1.070177388824132e+206\n-4.280709555296528e+206\n-1.712283822118611e+207\n-6.849135288474444e+207\n-2.7396541153897777e+208\n-1.095861646155911e+209\n-4.383446584623644e+209\n-1.7533786338494577e+210\n-7.013514535397831e+210\n-2.8054058141591324e+211\n-1.122162325663653e+212\n-4.488649302654612e+212\n-1.7954597210618447e+213\n-7.181838884247379e+213\n-2.8727355536989516e+214\n-1.1490942214795806e+215\n-4.5963768859183225e+215\n-1.838550754367329e+216\n-7.354203017469316e+216\n-2.9416812069877264e+217\n-1.1766724827950906e+218\n-4.706689931180362e+218\n-1.882675972472145e+219\n-7.53070388988858e+219\n-3.012281555955432e+220\n-1.2049126223821727e+221\n-4.819650489528691e+221\n-1.9278601958114764e+222\n-7.711440783245905e+222\n-3.084576313298362e+223\n-1.2338305253193449e+224\n-4.9353221012773795e+224\n-1.9741288405109518e+225\n-7.896515362043807e+225\n-3.158606144817523e+226\n-1.2634424579270092e+227\n-5.053769831708037e+227\n-2.0215079326832146e+228\n-8.086031730732859e+228\n-3.2344126922931434e+229\n-1.2937650769172574e+230\n-5.1750603076690295e+230\n-2.0700241230676118e+231\n-8.280096492270447e+231\n-3.312038596908179e+232\n-1.3248154387632716e+233\n-5.299261755053086e+233\n-2.1197047020212345e+234\n-8.478818808084938e+234\n-3.391527523233975e+235\n-1.35661100929359e+236\n-5.42644403717436e+236\n-2.170577614869744e+237\n-8.682310459478976e+237\n-3.4729241837915906e+238\n-1.3891696735166362e+239\n-5.556678694066545e+239\n-2.222671477626618e+240\n-8.890685910506472e+240\n-3.556274364202589e+241\n-1.4225097456810355e+242\n-5.690038982724142e+242\n-2.2760155930896568e+243\n-9.104062372358627e+243\n-3.641624948943451e+244\n-1.4566499795773804e+245\n-5.826599918309521e+245\n-2.3306399673238086e+246\n-9.322559869295234e+246\n-3.729023947718094e+247\n-1.4916095790872375e+248\n-5.96643831634895e+248\n-2.38657532653958e+249\n-9.54630130615832e+249\n-3.818520522463328e+250\n-1.5274082089853312e+251\n-6.109632835941325e+251\n-2.44385313437653e+252\n-9.77541253750612e+252\n-3.910165015002448e+253\n-1.564066006000979e+254\n-6.256264024003917e+254\n-2.5025056096015666e+255\n-1.0010022438406266e+256\n-4.0040089753625066e+256\n-1.6016035901450026e+257\n-6.40641436058001e+257\n-2.562565744232004e+258\n-1.0250262976928017e+259\n-4.100105190771207e+259\n-1.6400420763084827e+260\n-6.560168305233931e+260\n-2.6240673220935723e+261\n-1.049626928837429e+262\n-4.198507715349716e+262\n-1.6794030861398863e+263\n-6.717612344559545e+263\n-2.687044937823818e+264\n-1.0748179751295272e+265\n-4.299271900518109e+265\n-1.7197087602072435e+266\n-6.878835040828974e+266\n-2.7515340163315897e+267\n-1.1006136065326359e+268\n-4.4024544261305435e+268\n-1.7609817704522174e+269\n-7.04392708180887e+269\n-2.817570832723548e+270\n-1.1270283330894191e+271\n-4.5081133323576765e+271\n-1.8032453329430706e+272\n-7.212981331772282e+272\n-2.885192532708913e+273\n-1.1540770130835652e+274\n-4.616308052334261e+274\n-1.8465232209337043e+275\n-7.386092883734817e+275\n-2.954437153493927e+276\n-1.1817748613975708e+277\n-4.727099445590283e+277\n-1.8908397782361132e+278\n-7.563359112944453e+278\n-3.025343645177781e+279\n-1.2101374580711125e+280\n-4.84054983228445e+280\n-1.93621993291378e+281\n-7.74487973165512e+281\n-3.097951892662048e+282\n-1.2391807570648192e+283\n-4.956723028259277e+283\n"}︡{"done":true}
︠a8cd2ff8-a5dc-4e39-a905-97bda3a3b53ds︠

︡bf1db856-736b-41c8-86d2-9aefa56608d8︡{"done":true}
︠266563b7-181e-45a9-9dec-2854c37ca7e6i︠
%md
## Newton's method
︡7edd98fd-9fa4-4fac-b2f4-2ace94934714︡{"done":true,"md":"## Newton's method"}
︠5bdd99ab-05f3-442f-9ff4-d7cc54f58d09︠

︡61320882-75ce-4e29-bf11-4249e06db786︡
︠243aee95-c272-4597-a4cd-7c215272a947s︠
def newton(f, x, tol, display = []):
    converged = False
    while not converged:
        dx = f(x)/f.derivative()(x)
        x -= dx
        converged = abs(dx) <= tol
        if display:
            display(x)
    return x
︡9ddb3c6c-2919-4661-b151-344f7a0714d0︡{"done":true}
︠b57a5a92-629a-4878-8f6b-3adc9c29c501s︠
f(x) = x^2 - 2
root = numerical_approx(sqrt(2), digits=60)
approx_root = newton(f,0.1,1e-9,lambda x : print(abs(x - root)))
︡3752253b-31cd-47ac-838e-2ef723969271︡{"stdout":"8.63578643762690\n3.71028892518909\n1.34317857604648\n0.327144018076497\n0.0307298195858208\n0.000326767755597590\n3.77427080699988e-8\n4.44089209850063e-16\n0.000000000000000\n"}︡{"done":true}
︠616ee428-4fe5-44ac-a871-490785844998i︠
%md
### Convergence
︡f573a2fa-7ba4-422c-9fc6-7623c7e3d823︡{"done":true,"md":"### Convergence"}
︠b351f017-197f-4c6f-8eb5-12344a3096f3s︠
f(x) = (x - 2)^2
root = 2
approx_root = newton(f,0.1,1e-9,lambda x : print(abs(x - root)))
︡6c9d4297-1f70-4cc0-a2a3-aa3e1f899ad4︡{"stdout":"0.950000000000000\n0.475000000000000\n0.237500000000000\n0.118750000000000\n0.0593750000000000\n0.0296875000000001\n0.0148437500000000\n0.00742187499999991\n0.00371093749999996\n0.00185546875000009\n0.000927734375000044\n0.000463867187499911\n0.000231933593749956\n0.000115966796875089\n0.0000579833984375444\n0.0000289916992188832\n0.0000144958496095526\n7.24792480477632e-6\n3.62396240238816e-6\n1.81198120108306e-6\n9.05990600541529e-7\n4.52995300159742e-7\n2.26497649968849e-7\n1.13248824984424e-7\n5.66244124922122e-8\n2.83122063571284e-8\n1.41561031785642e-8\n7.07805147825979e-9\n3.53902573912990e-9\n1.76951275854265e-9\n8.84756268249021e-10\n"}︡{"done":true}
︠263be726-c877-4333-b0c2-0d72441d93e4i︠
%md
### Basin of attraction
︡0201cee0-d829-405c-a2c9-4f7f8fc84287︡{"done":true,"md":"### Basin of attraction"}
︠036cf4b2-7ad0-4653-86de-29b20ca78115s︠
f(x) = (x-1)*(x+1)*(x+1.5)
roots = [(x0, newton(f,x0,1e-3,lambda x:x)) for x0 in srange(-2,2,.1)]
list_plot(roots)
︡c5ed3326-6c66-44d1-8de9-0e5f0c491148︡{"file":{"filename":"/home/user/.sage/temp/project-1e6de7dc-adeb-4f47-ae0e-229406713b63/1497/tmp_wqdhWv.svg","show":true,"text":null,"uuid":"01209269-b8c5-4b44-aae9-8223c26294ce"},"once":false}︡{"done":true}
︠7ee6bed8-6376-47f1-bc3b-8134a417422e︠

︡7fdd831f-3a8c-4b7e-a76b-7dd5fb064ff5︡
︠55d4666e-5b82-4d40-b278-3d5d17f5b96fs︠
t = srange(-1,1,.01)
n = len(t)
Roots = np.zeros((n,n))
for i in range(n):
    for j in range(n):
        root = arg(newton(x^3-1,t[i]+t[j]*I,1e-9,lambda x:x))
        Roots[i,j] = RDF(root)
︡500eb0f5-e19c-4ad2-a705-d395323d3e03︡{"stderr":"<string>:3: DeprecationWarning: Substitution using function-call syntax and unnamed arguments is deprecated and will be removed from a future release of Sage; you can use named arguments instead, like EXPR(x=..., y=...)\nSee http://trac.sagemath.org/5930 for details.\n"}︡{"done":true}
︠2d5db0c5-d765-459b-8cf8-23765eb61ef1s︠
matrix_plot(Roots)
︡05524e2b-b9eb-4d4e-967c-d71534d32340︡{"file":{"filename":"/home/user/.sage/temp/project-1e6de7dc-adeb-4f47-ae0e-229406713b63/1497/tmp_FW7kaz.svg","show":true,"text":null,"uuid":"92cb1d1f-82e7-4e51-ab76-df986960a36e"},"once":false}︡{"done":true}
︠03ac9349-6fe4-4110-ae8b-d16bead99fbai︠
%md
### Horner's method
︡bbce42ee-ba86-4aea-8f68-f06e37adcfb9︡{"done":true,"md":"### Horner's method"}
︠0af065d8-c214-48d6-a1d6-657b20e79578s︠
f0(x) = x^6 + 4*x^5 - 72*x^4 - 214*x^3 + 1127*x^2 + 1602*x - 5040
r0 = CDF(newton(f0,0,1e-6))
print(r0)

f1 = f0().maxima_methods().divide(x-r0)[0]
r1 = CDF(newton(f1,0,1e-6))
print(r1)

f2 = f1().maxima_methods().divide(x-r1)[0]
r2 = CDF(newton(f2,0,1e-6))
print(r2)

f3 = f2().maxima_methods().divide(x-r2)[0]
r3 = CDF(newton(f3,0,1e-6))
print(r3)

f4 = f3().maxima_methods().divide(x-r3)[0]
r4 = CDF(newton(f4,0,1e-6))
print(r4)
︡21462f15-6eae-4d73-aeeb-c0d41490ad1c︡{"stdout":"3.000000000000027\n"}︡{"stdout":"-7.999999999999995\n"}︡{"stdout":"6.999999999999999\n"}︡{"stdout":"-5.000000000000022\n"}︡{"stdout":"1.9999999999999656\n"}︡{"done":true}
︠649a170a-1c89-4e74-8433-fc2f6c15e8f5i︠
%md
## The companion matrix
︡2b751a81-f1c6-4376-a6e2-648391ebe4fd︡{"done":true,"md":"## The companion matrix"}
︠8559094f-50ba-4075-8adc-65aba9a4e15es︠
def pol2companion(p):
    n = len(p)
    m = matrix(RDF,n)
    for i in range(1,n):
        m[i,i-1]=1
    m.set_column(n-1,-p)
    return m
︡f5caca23-864f-4b34-8fc5-b88534eed39b︡{"done":true}
︠bf0c18c4-309d-47ea-a72e-06b379e90d5bs︠
p = vector(RDF,[2,-3])
P = pol2companion(p)
print(P)
︡4ca7f595-bbf6-4dd6-b167-6f2ea502a5e9︡{"stdout":"[ 0.0 -2.0]\n[ 1.0  3.0]\n"}︡{"done":true}
︠67ede8cd-bea1-487f-be61-1e77750796d4s︠
V = P.eigenvectors_right()
V
︡fd12a904-adf6-48d5-9bbf-f0b10d190aab︡{"stdout":"[(1.0, [(-0.8944271909999159, 0.4472135954999579)], 1), (2.0, [(0.7071067811865475, -0.7071067811865475)], 1)]\n"}︡{"done":true}
︠a4d372ce-bf79-4600-8719-f91a0e144bffi︠
%md
### The power method
︡81b1c834-8bf7-49bc-b93a-881a944cfd49︡{"done":true,"md":"### The power method"}
︠79cbc83c-c361-44f8-8f07-6a6dcfa5cd30︠

︡18ebbcce-ea35-4c18-ba82-443560c11eaf︡
︠f57599ce-0f5a-4dfd-9a25-e38a46aece65s︠
x = vector(RDF,[random() for _ in range(2)])
for k in range(20):
    x = P*x
    x = x/x.norm()
v0 = x
r0 = v0*P*v0
print(r0,v0)
︡418d02a8-a567-4649-b9a1-a68e97949501︡{"stdout":"2.0000010045162657 (-0.7071065444197271, 0.7071070179532887)\n"}︡{"done":true}
︠166e4ecd-980e-45c0-8389-7a193a4e9148i︠
%md
### The QR algorithm
︡8167e002-c66a-483d-a181-5a835e331e88︡{"done":true,"md":"### The QR algorithm"}
︠fc2c8ef6-2aeb-4d82-baa5-f673db245877︠
︡312dee0e-add8-4b51-bd0b-9421be1ef93b︡
︠5f18995a-3771-4c47-9f8b-f197843bf20cs︠
Pn = identity_matrix(RDF,2)
for k in range(500):
    Pn = P*Pn
Q,R = Pn.QR()
Q.transpose()*P*Q
︡42401dc1-0ee6-4dad-bd71-15b60c73153b︡{"stdout":"[    1.9999999999999996      2.999999999999999]\n[1.3339344563327304e-16     0.9999999999999998]\n"}︡{"done":true}
︠6ed257c9-7300-488d-9d8f-d7da419eb860s︠
Q
︡26b7a9db-8aca-4347-8417-d4bf70d5d116︡{"stdout":"[-0.7071067808572753  0.7071067815158198]\n[ 0.7071067815158198  0.7071067808572752]\n"}︡{"done":true}
︠f9d2eae8-1d89-4b93-a5a4-aad466f61555s︠
Q = identity_matrix(RDF,2)
for k in range(20):
    Z = P*Q
    Q,R = Z.QR()
print(Q.transpose()*P*Q)
︡499afee2-8263-4c8c-909d-abd0aba66a1b︡{"stdout":"[    2.0000014305132927     2.9999995231614767]\n[-4.768385222184656e-07     0.9999985694867065]\n"}︡{"done":true}
︠07144d50-6ec1-4200-ae1c-dbee1a75e0e4s︠
Q
︡cef0cd02-6a42-489f-96d5-ba521c6a6515︡{"stdout":"[-0.7067609231995755  0.7074524700911602]\n[ 0.7074524700911602  0.7067609231995754]\n"}︡{"done":true}
︠f3419863-5abe-43df-affe-826e26c1486c︠









